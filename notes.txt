@RequestParam vs @PathVariable

RequestParam is to extract query values
http://localhost/customers?name=Tony

page=1&result=50

public void handlerMethod(@RequestParam String name) {
    ...
}

PathVariable is to extract data from URI
http://localhost/customers/12312312312312

public void handlerMethod(@PathVariable String name) {
    ...
}

For REST API we use PathVariable

ResponseEntity Class - allows us to return data and a status code


In a typical Java app, you have different types of objects.
Some are objects are like the Customer data class - data object.

Some classes don't hold data - it just contains our functionalities. How many instances do we need? Just one.


What is happening here is that we are defining an Interface type, CustomerService.

When Spring Boot encounters a CustomerSerivce type dependency in the CustomerController, it looks for a bean that implements the CustomerService interface.

Since CustomerSerivceImpl implements CustomerSrvice, it will inject an instance of CustomerServiceImpl into customerService dependency of CustomerController.


@Service
EnhancedCustomerServiceImpl implements CustomerService

SPring Boot will use this one inside CustomerController.


Loose coupling.

MVC
- migrated code from Controller only into Repository and Service
- moved our business logic into Service
- data store operations moved into Repository
- Controller just manages the Request

Used Interface for our Service Layer
- defined abstract methods for our Service implementation classes to implement

Custom Exception
- defnied an unchecked Exception
- threw Exception at our service Layer
- caught exception at our controller layer


1. Create Customer (Postman)
2. Controller will get the Request
   - catches error and returns a response to the client
3. Controller will call the Service method, customerService.createCustomer()
4. Service will call the Repository method, customerRepository.createCustomer()
   - might throw an error if id is not found
5. Repository will create the Customer in the ArrayList


